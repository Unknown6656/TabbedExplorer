using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Windows.Interop;
using static TabbedExplorer.WPF.Interop;
using System.ComponentModel.Design.Serialization;
using System.ComponentModel;
using System.Globalization;
using TabbedExplorer.WPF;

namespace __native__;


[Flags]
internal enum CMF
    : uint
{
    NORMAL = 0x00000000,
    DEFAULTONLY = 0x00000001,
    VERBSONLY = 0x00000002,
    EXPLORE = 0x00000004,
    NOVERBS = 0x00000008,
    CANRENAME = 0x00000010,
    NODEFAULT = 0x00000020,
    INCLUDESTATIC = 0x00000040,
    EXTENDEDVERBS = 0x00000100,
    RESERVED = 0xffff0000,
}

[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
internal struct CMINVOKECOMMANDINFO
{
    public int cbSize;
    public int fMask;
    public nint hwnd;
    public string lpVerb;
    public string lpParameters;
    public string lpDirectory;
    public int nShow;
    public int dwHotKey;
    public nint hIcon;
}

[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
internal struct CMINVOKECOMMANDINFO_ByIndex
{
    public int cbSize;
    public int fMask;
    public nint hwnd;
    public int iVerb;
    public string lpParameters;
    public string lpDirectory;
    public int nShow;
    public int dwHotKey;
    public nint hIcon;
}

[ComImport]
[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
[Guid("000214e4-0000-0000-c000-000000000046")]
internal interface IContextMenu
{
    [PreserveSig]
    nint QueryContextMenu(nint hMenu, uint indexMenu, int idCmdFirst, int idCmdLast, CMF uFlags);

    void InvokeCommand(ref CMINVOKECOMMANDINFO pici);

    [PreserveSig]
    nint GetCommandString(int idcmd, uint uflags, int reserved, [MarshalAs(UnmanagedType.LPStr)] StringBuilder commandstring, int cch);
}

[ComImport]
[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
[Guid("000214f4-0000-0000-c000-000000000046")]
internal interface IContextMenu2
    : IContextMenu
{
    [PreserveSig]
    new nint QueryContextMenu(nint hMenu, uint indexMenu, int idCmdFirst, int idCmdLast, CMF uFlags);

    void InvokeCommand(ref CMINVOKECOMMANDINFO_ByIndex pici);

    [PreserveSig]
    new nint GetCommandString(int idcmd, uint uflags, int reserved, [MarshalAs(UnmanagedType.LPStr)] StringBuilder commandstring, int cch);

    [PreserveSig]
    nint HandleMenuMsg(int uMsg, nint wParam, nint lParam);
}

[ComImport]
[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
[Guid("bcfce0a0-ec17-11d0-8d10-00a0c90f2719")]
internal interface IContextMenu3
    : IContextMenu2
{
    [PreserveSig]
    new nint QueryContextMenu(nint hMenu, uint indexMenu, int idCmdFirst, int idCmdLast, CMF uFlags);

    [PreserveSig]
    new nint InvokeCommand(ref CMINVOKECOMMANDINFO pici);

    [PreserveSig]
    new nint GetCommandString(int idcmd, uint uflags, int reserved, [MarshalAs(UnmanagedType.LPStr)] StringBuilder commandstring, int cch);

    [PreserveSig]
    new nint HandleMenuMsg(int uMsg, nint wParam, nint lParam);

    [PreserveSig]
    nint HandleMenuMsg2(int uMsg, nint wParam, nint lParam, out IntPtr plResult);
}


internal class ShellContextMenu
{
    private readonly MessageWindow _window;
    private readonly IContextMenu2 m_ComInterface2;
    private readonly IContextMenu3 m_ComInterface3;
    private const int CMD_FIRST = 0x8000;

    public IContextMenu ComInterface { get; set; }


    public ShellContextMenu(params ShellItem[] items) => Initialize(items);

    public bool HandleMenuMessage(ref Message m)
    {
        if ((m.Msg == (int)MSG.WM_COMMAND) && ((int)m.WParam >= CMD_FIRST))
        {
            InvokeCommand((int)m.WParam - CMD_FIRST);
            return true;
        }
        else
        {
            if (m_ComInterface3 != null)
            {
                if (m_ComInterface3.HandleMenuMsg2(m.Msg, m.WParam, m.LParam, out IntPtr result) == HResult.S_OK)
                {
                    m.Result = result;
                    return true;
                }
            }
            else if (m_ComInterface2 != null)
            {
                if (m_ComInterface2.HandleMenuMsg(m.Msg, m.WParam, m.LParam) == HResult.S_OK)
                {
                    m.Result = IntPtr.Zero;
                    return true;
                }
            }
        }
        return false;
    }

    public void InvokeDelete()
    {
        CMINVOKECOMMANDINFO invoke = new();
        invoke.lpVerb = "delete";
        invoke.cbSize = Marshal.SizeOf(invoke);

        try
        {
            ComInterface.InvokeCommand(ref invoke);
        }
        catch (COMException e) when ((uint)e.ErrorCode == 0x800704C7u)
        {
        }
    }

    public void InvokeRename()
    {
        CMINVOKECOMMANDINFO invoke = new();
        invoke.lpVerb = "rename";
        invoke.cbSize = Marshal.SizeOf(invoke);

        ComInterface.InvokeCommand(ref invoke);
    }

    public void Populate(Menu menu)
    {
        RemoveShellMenuItems(menu);

        ComInterface.QueryContextMenu(menu.Handle, 0, CMD_FIRST, int.MaxValue, CMF.EXPLORE);
    }

    public void ShowContextMenu(Control control, Point pos)
    {
        using ContextMenu menu = new();

        pos = control.PointToScreen(pos);
        
        Populate(menu);
        
        int command = User32.TrackPopupMenuEx(menu.Handle, TPM.TPM_RETURNCMD, pos.X, pos.Y, _window.Handle, IntPtr.Zero);

        if (command > 0)
            InvokeCommand(command - CMD_FIRST);
    }

    void Initialize(ShellItem[] items)
    {
        IntPtr[] pidls = new IntPtr[items.Length];
        ShellItem parent = null;

        for (int n = 0; n < items.Length; ++n)
        {
            pidls[n] = Shell32.ILFindLastID(items[n].Pidl);

            if (parent == null)
            {
                if (items[n] == ShellItem.Desktop)
                {
                    parent = ShellItem.Desktop;
                }
                else
                {
                    parent = items[n].Parent;

                }
            }
            else
            {
                if (items[n].Parent != parent)
                {
                    throw new Exception("All shell items must have the same parent");
                }
            }
        }

        parent.GetIShellFolder().GetUIObjectOf(IntPtr.Zero,
            (uint)pidls.Length, pidls,
            typeof(IContextMenu).GUID, 0, out IntPtr result);
        ComInterface = (IContextMenu)
            Marshal.GetTypedObjectForIUnknown(result,
                typeof(IContextMenu));
        m_ComInterface2 = ComInterface as IContextMenu2;
        m_ComInterface3 = ComInterface as IContextMenu3;
        m_MessageWindow = new MessageWindow(this);
    }

    void InvokeCommand(int index)
    {
        const int SW_SHOWNORMAL = 1;
        CMINVOKECOMMANDINFO_ByIndex invoke = new CMINVOKECOMMANDINFO_ByIndex();
        invoke.cbSize = Marshal.SizeOf(invoke);
        invoke.iVerb = index;
        invoke.nShow = SW_SHOWNORMAL;
        m_ComInterface2.InvokeCommand(ref invoke);
    }

    void TagManagedMenuItems(Menu menu, int tag)
    {
        MENUINFO info = new MENUINFO();

        info.cbSize = Marshal.SizeOf(info);
        info.fMask = MIM.MIM_MENUDATA;
        info.dwMenuData = tag;

        foreach (MenuItem item in menu.MenuItems)
        {
            User32.SetMenuInfo(item.Handle, ref info);
        }
    }

    void RemoveShellMenuItems(Menu menu)
    {
        const int tag = 0xAB;
        List<int> remove = new();
        int count = User32.GetMenuItemCount(menu.Handle);
        MENUINFO menuInfo = new MENUINFO();
        MENUITEMINFO itemInfo = new MENUITEMINFO();

        menuInfo.cbSize = Marshal.SizeOf(menuInfo);
        menuInfo.fMask = MIM.MIM_MENUDATA;
        itemInfo.cbSize = Marshal.SizeOf(itemInfo);
        itemInfo.fMask = MIIM.MIIM_ID | MIIM.MIIM_SUBMENU;

        // First, tag the managed menu items with an arbitary 
        // value (0xAB).
        TagManagedMenuItems(menu, tag);

        for (int n = 0; n < count; ++n)
        {
            User32.GetMenuItemInfo(menu.Handle, n, true, ref itemInfo);

            if (itemInfo.hSubMenu == IntPtr.Zero)
            {
                if (itemInfo.wID >= CMD_FIRST)
                    remove.Add(n);
            }
            else
            {
                User32.GetMenuInfo(itemInfo.hSubMenu, ref menuInfo);

                if (menuInfo.dwMenuData != tag)
                    remove.Add(n);
            }
        }

        remove.Reverse();

        foreach (int position in remove)
            User32.DeleteMenu(menu.Handle, position, MF.MF_BYPOSITION);
    }


    sealed class MessageWindow
        : System.Windows.Forms.Control
    {
        readonly ShellContextMenu _parent;


        public MessageWindow(ShellContextMenu parent) => _parent = parent;

        protected override void WndProc(ref Message m)
        {
            if (!_parent.HandleMenuMessage(ref m))
                base.WndProc(ref m);
        }
    }
}


[TypeConverter(typeof(ShellItemConverter))]
public class ShellItem : IEnumerable<ShellItem>
{
    public ShellItem(Uri uri) => Initialize(uri);

    public ShellItem(string path)
        : this(new Uri(path, UriKind.RelativeOrAbsolute))
    {
    }

    public ShellItem(Environment.SpecialFolder folder)
    {
        if (Shell32.SHGetSpecialFolderLocation(IntPtr.Zero, (CSIDL)folder, out IntPtr pidl) == HResult.S_OK)
        {
            try
            {
                m_ComInterface = CreateItemFromIDList(pidl);
            }
            finally
            {
                Shell32.ILFree(pidl);
            }
        }
        else
        {
            // SHGetSpecialFolderLocation does not support many common
            // CSIDL values on Windows 98, but SHGetFolderPath in 
            // ShFolder.dll does, so fall back to it if necessary. We
            // try SHGetSpecialFolderLocation first because it returns
            // a PIDL which is preferable to a path as it can express
            // virtual folder locations.
            StringBuilder path = new StringBuilder();
            Marshal.ThrowExceptionForHR((int)Shell32.SHGetFolderPath(IntPtr.Zero, (CSIDL)folder, IntPtr.Zero, 0, path));
            m_ComInterface = CreateItemFromParsingName(path.ToString());
        }
    }

    public ShellItem(ShellItem parent, string name)
    {
        if (parent.IsFileSystem)
        {
            // If the parent folder is in the file system, our best 
            // chance of success is to use the FileSystemPath to 
            // create the new item. Folders other than Desktop don't 
            // seem to implement ParseDisplayName properly.
            m_ComInterface = CreateItemFromParsingName(
                Path.Combine(parent.FileSystemPath, name));
        }
        else
        {
            IShellFolder folder = parent.GetIShellFolder();
            uint attributes = 0;

            folder.ParseDisplayName(IntPtr.Zero, IntPtr.Zero,
                name, out uint eaten, out IntPtr pidl, ref attributes);

            try
            {
                m_ComInterface = CreateItemFromIDList(pidl);
            }
            finally
            {
                Shell32.ILFree(pidl);
            }
        }
    }

    internal ShellItem(IntPtr pidl)
    {
        m_ComInterface = CreateItemFromIDList(pidl);
    }

    internal ShellItem(ShellItem parent, IntPtr pidl) => m_ComInterface = CreateItemWithParent(parent, pidl);

    public ShellItem(IShellItem comInterface) => m_ComInterface = comInterface;

    public int Compare(ShellItem item) => m_ComInterface.Compare(item.ComInterface, SICHINT.DISPLAY);

    public override bool Equals(object obj)
    {
        if (obj is ShellItem)
        {
            ShellItem otherItem = (ShellItem)obj;
            bool result = m_ComInterface.Compare(otherItem.ComInterface,
                SICHINT.DISPLAY) == 0;

            // Sometimes, folders are reported as being unequal even when
            // they refer to the same folder, so double check by comparing
            // the file system paths. (This was showing up on Windows XP in 
            // the SpecialFolders() test)
            if (!result)
            {
                result = IsFileSystem && otherItem.IsFileSystem &&
                    (FileSystemPath == otherItem.FileSystemPath);
            }

            return result;
        }
        else
        {
            return false;
        }
    }

    public string? GetDisplayName(SIGDN sigdn)
    {
        nint resultPtr = m_ComInterface.GetDisplayName(sigdn);
        string? result = Marshal.PtrToStringUni(resultPtr);

        Marshal.FreeCoTaskMem(resultPtr);

        return result;
    }

    public IEnumerator<ShellItem> GetEnumerator() => GetEnumerator(SHCONTF.FOLDERS | SHCONTF.INCLUDEHIDDEN | SHCONTF.NONFOLDERS);

    public IEnumerator<ShellItem> GetEnumerator(SHCONTF filter)
    {
        IShellFolder folder = GetIShellFolder();
        IEnumIDList enumId = GetIEnumIDList(folder, filter);
        HResult result;

        if (enumId is null)
            yield break;

        result = enumId.Next(1, out IntPtr pidl, out uint count);

        while (result == HResult.S_OK)
        {
            yield return new ShellItem(this, pidl);

            Shell32.ILFree(pidl);

            result = enumId.Next(1, out pidl, out count);
        }

        if (result != HResult.S_FALSE)
            Marshal.ThrowExceptionForHR((int)result);

        yield break;
    }

    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();

    public ComTypes.IDataObject GetIDataObject()
    {
        IntPtr result = m_ComInterface.BindToHandler(IntPtr.Zero, BHID.SFUIObject, typeof(ComTypes.IDataObject).GUID);

        return (ComTypes.IDataObject)Marshal.GetTypedObjectForIUnknown(result, typeof(ComTypes.IDataObject));
    }

    public IDropTarget GetIDropTarget(System.Windows.Forms.Control control)
    {
        IntPtr result = GetIShellFolder().CreateViewObject(control.Handle,
            typeof(IDropTarget).GUID);
        return (IDropTarget)Marshal.GetTypedObjectForIUnknown(result,
                typeof(IDropTarget));
    }

    public IShellFolder GetIShellFolder()
    {
        IntPtr result = m_ComInterface.BindToHandler(IntPtr.Zero, BHID.SFObject, typeof(IShellFolder).GUID);

        return (IShellFolder)Marshal.GetTypedObjectForIUnknown(result, typeof(IShellFolder));
    }

    public int GetSystemImageListIndex(ShellIconType type, ShellIconFlags flags)
    {
        SHFILEINFO info = new SHFILEINFO();
        IntPtr result = Shell32.SHGetFileInfo(Pidl, 0, out info,
            Marshal.SizeOf(info),
            SHGFI.ICON | SHGFI.SYSICONINDEX | SHGFI.OVERLAYINDEX | SHGFI.PIDL |
            (SHGFI)type | (SHGFI)flags);

        return result == IntPtr.Zero ? throw new Exception("Error retreiving shell folder icon") : info.iIcon;
    }

    public bool IsImmediateParentOf(ShellItem item) => IsFolder && Shell32.ILIsParent(Pidl, item.Pidl, true);

    public bool IsParentOf(ShellItem item) => IsFolder && Shell32.ILIsParent(Pidl, item.Pidl, false);

    public override string ToString() => ToUri().ToString();

    public Uri ToUri()
    {
        KnownFolderManager manager = new KnownFolderManager();
        StringBuilder path = new StringBuilder("shell:///");
        KnownFolder knownFolder = manager.FindNearestParent(this);

        if (knownFolder != null)
        {
            List<string> folders = new List<string>();
            ShellItem knownFolderItem = knownFolder.CreateShellItem();
            ShellItem item = this;

            while (item != knownFolderItem)
            {
                folders.Add(item.GetDisplayName(SIGDN.PARENTRELATIVEPARSING));
                item = item.Parent;
            }

            folders.Reverse();
            path.Append(knownFolder.Name);
            foreach (string s in folders)
            {
                path.Append('/');
                path.Append(s);
            }

            return new Uri(path.ToString());
        }
        else
        {
            return new Uri(FileSystemPath);
        }
    }

    public ShellItem this[string name] => new ShellItem(this, name);

    public static bool operator !=(ShellItem a, ShellItem b) => !(a == b);

    public static bool operator ==(ShellItem a, ShellItem b) => ReferenceEquals(a, null) ? ReferenceEquals(b, null) : a.Equals(b);

    public IShellItem ComInterface => m_ComInterface;

    public string DisplayName => GetDisplayName(SIGDN.NORMALDISPLAY);

    public string FileSystemPath => GetDisplayName(SIGDN.FILESYSPATH);

    public bool HasSubFolders => m_ComInterface.GetAttributes(SFGAO.HASSUBFOLDER) != 0;

    public bool IsFileSystem => m_ComInterface.GetAttributes(SFGAO.FILESYSTEM) != 0;

    public bool IsFileSystemAncestor => m_ComInterface.GetAttributes(SFGAO.FILESYSANCESTOR) != 0;

    public bool IsFolder => m_ComInterface.GetAttributes(SFGAO.FOLDER) != 0;

    public bool IsReadOnly => m_ComInterface.GetAttributes(SFGAO.READONLY) != 0;

    /// <summary>
    /// Gets the item's parent.
    /// </summary>
    public ShellItem Parent
    {
        get
        {
            HResult result = m_ComInterface.GetParent(out IShellItem item);

            if (result == HResult.S_OK)
            {
                return new ShellItem(item);
            }
            else if (result == HResult.MK_E_NOOBJECT)
            {
                return null;
            }
            else
            {
                Marshal.ThrowExceptionForHR((int)result);
                return null;
            }
        }
    }

    public string ParsingName => GetDisplayName(SIGDN.DESKTOPABSOLUTEPARSING);

    public IntPtr Pidl => GetIDListFromObject(m_ComInterface);

    public Icon ShellIcon
    {
        get
        {
            SHFILEINFO info = new SHFILEINFO();
            IntPtr result = Shell32.SHGetFileInfo(Pidl, 0, out info,
                Marshal.SizeOf(info),
                SHGFI.ADDOVERLAYS | SHGFI.ICON |
                SHGFI.SHELLICONSIZE | SHGFI.PIDL);

            return result == IntPtr.Zero ? throw new Exception("Error retreiving shell folder icon") : Icon.FromHandle(info.hIcon);
        }
    }

    public string ToolTipText
    {
        get
        {
            IntPtr result;
            IQueryInfo queryInfo;
            string infoTip;

            try
            {
                IntPtr relativePidl = Shell32.ILFindLastID(Pidl);
                Parent.GetIShellFolder().GetUIObjectOf(IntPtr.Zero, 1,
                    new IntPtr[] { relativePidl },
                    typeof(IQueryInfo).GUID, 0, out result);
            }
            catch (Exception)
            {
                return string.Empty;
            }

            queryInfo = (IQueryInfo)
                Marshal.GetTypedObjectForIUnknown(result,
                    typeof(IQueryInfo));
            queryInfo.GetInfoTip(0, out IntPtr infoTipPtr);
            infoTip = Marshal.PtrToStringUni(infoTipPtr);
            Ole32.CoTaskMemFree(infoTipPtr);
            return infoTip;
        }
    }

    /// <summary>
    /// Gets the Desktop folder.
    /// </summary>
    public static ShellItem Desktop
    {
        get
        {
            if (m_Desktop == null)
            {
                IShellItem item;

                Shell32.SHGetSpecialFolderLocation(
                     IntPtr.Zero, (CSIDL)Environment.SpecialFolder.Desktop,
                     out IntPtr pidl);

                try
                {
                    item = CreateItemFromIDList(pidl);
                }
                finally
                {
                    Shell32.ILFree(pidl);
                }

                m_Desktop = new ShellItem(item);
            }
            return m_Desktop;
        }
    }

    internal static bool RunningVista
    {
        get { return Environment.OSVersion.Version.Major >= 6; }
    }

    void Initialize(Uri uri)
    {
        if (uri.Scheme == "file")
        {
            m_ComInterface = CreateItemFromParsingName(uri.LocalPath);
        }
        else if (uri.Scheme == "shell")
        {
            InitializeFromShellUri(uri);
        }
        else
        {
            throw new InvalidOperationException("Invalid uri scheme");
        }
    }

    void InitializeFromShellUri(Uri uri)
    {
        KnownFolderManager manager = new KnownFolderManager();
        string path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped);
        string knownFolder;
        string restOfPath;
        int separatorIndex = path.IndexOf('/');

        if (separatorIndex != -1)
        {
            knownFolder = path.Substring(0, separatorIndex);
            restOfPath = path.Substring(separatorIndex + 1);
        }
        else
        {
            knownFolder = path;
            restOfPath = string.Empty;
        }

        m_ComInterface = manager.GetFolder(knownFolder).CreateShellItem().ComInterface;

        if (restOfPath != string.Empty)
        {
            m_ComInterface = this[restOfPath.Replace('/', '\\')].ComInterface;
        }
    }

    static IShellItem CreateItemFromIDList(IntPtr pidl)
    {
        return RunningVista
            ? Shell32.SHCreateItemFromIDList(pidl,
                typeof(IShellItem).GUID)
            : new Interop.VistaBridge.ShellItemImpl(
                pidl, false);
    }

    static IShellItem CreateItemFromParsingName(string path)
    {
        if (RunningVista)
        {
            return Shell32.SHCreateItemFromParsingName(path, IntPtr.Zero,
                typeof(IShellItem).GUID);
        }
        else
        {
            IShellFolder desktop = Desktop.GetIShellFolder();
            uint attributes = 0;

            desktop.ParseDisplayName(IntPtr.Zero, IntPtr.Zero,
                path, out uint eaten, out IntPtr pidl, ref attributes);
            return new Interop.VistaBridge.ShellItemImpl(
                pidl, true);
        }
    }

    static IShellItem CreateItemWithParent(ShellItem parent, IntPtr pidl)
    {
        if (RunningVista)
        {
            return Shell32.SHCreateItemWithParent(IntPtr.Zero,
                parent.GetIShellFolder(), pidl, typeof(IShellItem).GUID);
        }
        else
        {
            Interop.VistaBridge.ShellItemImpl impl =
                (Interop.VistaBridge.ShellItemImpl)parent.ComInterface;
            return new Interop.VistaBridge.ShellItemImpl(
                Shell32.ILCombine(impl.Pidl, pidl), true);
        }
    }

    static IntPtr GetIDListFromObject(IShellItem item)
    {
        return RunningVista ? Shell32.SHGetIDListFromObject(item) : ((Interop.VistaBridge.ShellItemImpl)item).Pidl;
    }

    static IEnumIDList GetIEnumIDList(IShellFolder folder, SHCONTF flags)
    {

        return folder.EnumObjects(IntPtr.Zero, flags, out IEnumIDList result) == HResult.S_OK ? result : null;
    }

    IShellItem m_ComInterface;
    static ShellItem m_Desktop;
}

sealed class ShellItemConverter : TypeConverter
{
    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) => sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);

    public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) => destinationType == typeof(InstanceDescriptor) || base.CanConvertTo(context, destinationType);

    public override object? ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) => value is string s ? s.Length == 0 ? ShellItem.Desktop : new ShellItem(s) : base.ConvertFrom(context, culture, value);

    public override object? ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
    {
        if (value is ShellItem item)
        {
            Uri uri = item.ToUri();

            if (destinationType == typeof(string))
                return uri.Scheme == "file" ? uri.LocalPath : (object)uri.ToString();
            else if (destinationType == typeof(InstanceDescriptor))
                return new InstanceDescriptor(typeof(ShellItem).GetConstructor(new Type[] { typeof(string) }), new object[] { uri.ToString() });
        }
        
        return base.ConvertTo(context, culture, value, destinationType);
    }
}